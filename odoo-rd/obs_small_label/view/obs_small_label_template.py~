# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (c) 2013-Present Acespritech Solutions Pvt. Ltd. (<http://acespritech.com>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp import models, api, _
from reportlab.graphics.barcode import createBarcodeDrawing
from reportlab.graphics.shapes import Drawing
from base64 import b64encode
from reportlab.graphics import renderPM
from reportlab.lib import units
from datetime import date


class obs_small_label_template(models.AbstractModel):
    _name = 'report.obs_small_label.obs_small_label_template'

    @api.multi
    def render_html(self, data=None):
        report_obj = self.env['report']
        report = report_obj._get_report_from_name('obs_small_label.obs_small_label_template')
        docargs = {
            'doc_ids': self.env["obs.small.label.wizard"].browse(data["ids"]),
            'doc_model': report.model,
            'docs': self,
            'get_barcode_data' : self._get_barcode_data,
            'data': data,
        }
        return report_obj.render('obs_small_label.obs_small_label_template', docargs)

    def get_barcode(self, value, width, barWidth = 0.05 * units.inch, fontSize = 60, humanReadable = True):
        barcode = createBarcodeDrawing('Code128', value = value, barWidth = barWidth, fontSize = fontSize, humanReadable = humanReadable)
        drawing_width = width
        barcode_scale = drawing_width / barcode.width
        drawing_height = barcode.height * barcode_scale

        drawing = Drawing(drawing_width, drawing_height)
        drawing.scale(barcode_scale, barcode_scale)
        drawing.add(barcode, name='barcode')
        barcode_encode = b64encode(renderPM.drawToString(drawing, fmt = 'PNG'))
        barcode_str = '<img style="width:320px;height:80px;"  src="data:image/png;base64,{0} : ">'.format(barcode_encode)
        return barcode_str

    def _get_barcode_data(self, data):
        product_ids = data['form']['product_ids']
        pricelist_id = data['form']['pricelist_id']
        product_list = []
        pricelist_obj = self.env['product.pricelist']
        produ_obj = self.env['product.small.label.qty']
        product_obj = self.env['product.template']
        barcode_number = ''
        currency_data = self.env['res.currency'].search([('id', '=', data['form']['currency_id'][0])])
        for prod in produ_obj.browse(product_ids):
            for product in product_obj.browse(prod.product_id.id):
                product_data ={}
                if product.ean13 and data['form']['barcode_from'] == 'ean13':
                    barcode_number = product.ean13
                elif product.default_code and data['form']['barcode_from'] == 'ref':
                    barcode_number = product.default_code
                else:
                    continue
                barcode_str = self.get_barcode(value = barcode_number, width = 1500)
                if pricelist_id:
                    price = pricelist_obj.price_get(pricelist_id[0], product.id, product.qty_available)
                    price = price.get(pricelist_id[0])
                else:
                    price = product.list_price
                if data['form']['cur_position'] == 'after':
                    list_price = str(price) + ' ' + currency_data.symbol
                else:
                    list_price = currency_data.symbol + ' ' + str(price)
                for qty in range(int(prod.qty)):
                    product_data.update({'ean13' : barcode_str, 'list_price' : list_price, 'display_price' : data['form']['display_price'],
                                        'name' : str(product.name)[:25], 'default_code': product.default_code})
                    product_list.append(product_data)

        return product_list
        

class obs_small_label_template_impresora_pequena(models.AbstractModel):
    _name = 'report.obs_small_label.obs_small_label_template'

    @api.multi
    def render_html(self, data=None):
        report_obj = self.env['report']
        report = report_obj._get_report_from_name('obs_small_label.obs_small_label_template_impresora_pequena')
        docargs = {
            'doc_ids': self.env["obs.small.label.wizard"].browse(data["ids"]),
            'doc_model': report.model,
            'docs': self,
            'get_barcode_data' : self._get_barcode_data,
            'data': data,
        }
        return report_obj.render('obs_small_label.obs_small_label_template', docargs)

    def get_barcode(self, value, width, barWidth = 0.05 * units.inch, fontSize = 60, humanReadable = True):
        barcode = createBarcodeDrawing('Code128', value = value, barWidth = barWidth, fontSize = fontSize, humanReadable = humanReadable)
        drawing_width = width
        barcode_scale = drawing_width / barcode.width
        drawing_height = barcode.height * barcode_scale

        drawing = Drawing(drawing_width, drawing_height)
        drawing.scale(barcode_scale, barcode_scale)
        drawing.add(barcode, name='barcode')
        barcode_encode = b64encode(renderPM.drawToString(drawing, fmt = 'PNG'))
        barcode_str = '<img style="width:320px;height:80px;"  src="data:image/png;base64,{0} : ">'.format(barcode_encode)
        return barcode_str

    def _get_barcode_data(self, data):
        product_ids = data['form']['product_ids']
        pricelist_id = data['form']['pricelist_id']
        product_list = []
        pricelist_obj = self.env['product.pricelist']
        produ_obj = self.env['product.small.label.qty']
        product_obj = self.env['product.template']
        barcode_number = ''
        currency_data = self.env['res.currency'].search([('id', '=', data['form']['currency_id'][0])])
        for prod in produ_obj.browse(product_ids):
            for product in product_obj.browse(prod.product_id.id):
                product_data ={}
                if product.ean13 and data['form']['barcode_from'] == 'ean13':
                    barcode_number = product.ean13
                elif product.default_code and data['form']['barcode_from'] == 'ref':
                    barcode_number = product.default_code
                else:
                    continue
                barcode_str = self.get_barcode(value = barcode_number, width = 1500)
                if pricelist_id:
                    price = pricelist_obj.price_get(pricelist_id[0], product.id, product.qty_available)
                    price = price.get(pricelist_id[0])
                else:
                    price = product.list_price
                if data['form']['cur_position'] == 'after':
                    list_price = str(price) + ' ' + currency_data.symbol
                else:
                    list_price = currency_data.symbol + ' ' + str(price)
                for qty in range(int(prod.qty)):
                    product_data.update({'ean13' : barcode_str, 'list_price' : list_price, 'display_price' : data['form']['display_price'],
                                        'name' : str(product.name)[:25], 'default_code': product.default_code})
                    product_list.append(product_data)

        return product_list

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
